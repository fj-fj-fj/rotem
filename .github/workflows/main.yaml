name: CI-main

on:
  - push
  - pull_request

jobs:
  lint_py:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10.0']
    steps:
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      #----------------------------------------------
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      - name: Install & configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      - name: Load cached venv if cache exists
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      - name: Install dependencies if cache does not exist
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      - name: Lint with flake8
        run: poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      #----------------------------------------------
      - name: Check formatting with black
        run: poetry run black . --check
      #----------------------------------------------
      # - name: Check types with mypy
      #   run: poetry run mypy .
      #----------------------------------------------
      - name: Test with pytest
        env:
          FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
        run: poetry run pytest .
